name: Databricks CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
  DATABRICKS_CONFIG_FILE: "$HOME/.databrickscfg"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y jq
        
        # Install Python dependencies
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pyspark delta-spark pyyaml python-dotenv databricks-cli
        pip install -e .
        
        # Configure Python path for tests
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
        
    - name: Run basic tests
      run: |
        # Add root directory to PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:${{ github.workspace }}
        # Run only critical tests without coverage requirements
        python -m pytest tests/test_config.py -v
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        DATABRICKS_WAREHOUSE_ID: ${{ secrets.DATABRICKS_WAREHOUSE_ID }}
      continue-on-error: true
        
    - name: Configure Databricks CLI
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        # Verify environment variables are set
        echo "=== Verifying Environment Variables ==="
        echo "DATABRICKS_HOST is set: ${#DATABRICKS_HOST} characters"
        echo "DATABRICKS_TOKEN is set: ${#DATABRICKS_TOKEN} characters"
        
        # Verify databricks-cli is installed
        echo "=== Databricks CLI Version ==="
        databricks --version || echo "Failed to get databricks-cli version"
        
        # Test databricks-cli connectivity
        echo "=== Testing Databricks Connectivity ==="
        databricks clusters list || echo "Failed to list clusters"
        echo "===================================="
        
    - name: Deploy Notebooks to Databricks
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Define the target workspace path
        WORKSPACE_BASE="/Users/lnunesvalle@gmail.com/DataFusionX"
        
        # Create the base directory
        echo "Creating base directory: $WORKSPACE_BASE"
        databricks workspace mkdirs "$WORKSPACE_BASE"
        
        # Function to process a single notebook
        process_notebook() {
          local src_file="$1"
          local rel_path="${src_file#notebooks/}"
          local target_dir="$WORKSPACE_BASE/$(dirname "$rel_path")"
          
          # Create target directory if it doesn't exist
          if [[ "$target_dir" != "$WORKSPACE_BASE" ]]; then
            echo "Creating directory: $target_dir"
            databricks workspace mkdirs "$target_dir"
          fi
          
          # Import the notebook
          echo "Deploying $src_file to $target_dir"
          databricks workspace import \
            --language PYTHON \
            --overwrite \
            "$src_file" \
            "$WORKSPACE_BASE/$rel_path"
        }
        
        # Export the function so it's available in find -exec
        export -f process_notebook
        export WORKSPACE_BASE
        
        # Process all Python files in the notebooks directory
        echo "Deploying Python notebooks..."
        find notebooks -name "*.py" -type f -exec bash -c 'process_notebook "$0"' {} \;
        
        echo "✅ Notebook deployment completed"
        
        # List the deployed notebooks for verification
        echo "\n📋 Deployed notebooks in $WORKSPACE_BASE:"
        databricks workspace ls "$WORKSPACE_BASE"
    
    - name: Run SQL Queries on Warehouse
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Define SQL Warehouse ID (from your Databricks SQL Warehouse)
        WAREHOUSE_ID="${{ secrets.DATABRICKS_WAREHOUSE_ID }}"
        
        echo "🚀 Starting SQL execution on Warehouse ID: $WAREHOUSE_ID"
        
        # Create a temporary file for SQL queries
        cat > queries.json << 'EOF'
        {
          "statements": [
            {
              "statement": "CREATE TABLE IF NOT EXISTS example_table (id INT, name STRING, value DOUBLE)",
              "result_index": 0
            },
            {
              "statement": "INSERT INTO example_table VALUES (1, 'test', 3.14)",
              "result_index": 1
            },
            {
              "statement": "SELECT * FROM example_table",
              "result_index": 2
            }
          ]
        }
        EOF
        
        # Execute the SQL statements using Databricks SQL Execution API
        echo "📝 Executing SQL queries..."
        
        # First, create an execution context
        RESPONSE=$(databricks api post /api/2.0/sql/statements \
          --data @queries.json \
          --query warehouse_id=$WAREHOUSE_ID)
          
        # Get the statement ID from the response
        STATEMENT_ID=$(echo $RESPONSE | jq -r '.statement_id')
        
        if [ -z "$STATEMENT_ID" ] || [ "$STATEMENT_ID" = "null" ]; then
          echo "❌ Failed to create SQL statement execution"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
        echo "✅ SQL execution started with statement ID: $STATEMENT_ID"
        echo "🔗 View your SQL Warehouse: ${{ secrets.DATABRICKS_HOST }}#sql/warehouses/$WAREHOUSE_ID"
        
        # Optional: Check the status of the execution
        echo "⏳ Checking execution status..."
        databricks api get /api/2.0/sql/statements/$STATEMENT_ID
        
        echo "✅ SQL execution completed successfully!"
