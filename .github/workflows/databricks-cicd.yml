name: Databricks CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
  DATABRICKS_CONFIG_FILE: "$HOME/.databrickscfg"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pyspark delta-spark pyyaml python-dotenv databricks-cli
        pip install -e .
        
        # Configure Python path for tests
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
        
    - name: Run tests
      run: |
        # Add root directory to PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:${{ github.workspace }}
        # Explicitly specify test files to run with lower coverage threshold
        python -m pytest tests/test_api_client.py tests/test_config.py tests/test_db_utils.py tests/test_pipeline.py -v --cov=. --cov-fail-under=30
    
    - name: Configure Databricks CLI
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        # Verify environment variables are set
        echo "=== Verifying Environment Variables ==="
        echo "DATABRICKS_HOST is set: ${#DATABRICKS_HOST} characters"
        echo "DATABRICKS_TOKEN is set: ${#DATABRICKS_TOKEN} characters"
        
        # Verify databricks-cli is installed
        echo "=== Databricks CLI Version ==="
        databricks --version || echo "Failed to get databricks-cli version"
        
        # Test databricks-cli connectivity
        echo "=== Testing Databricks Connectivity ==="
        databricks clusters list || echo "Failed to list clusters"
        echo "===================================="
        
    - name: Deploy Notebooks to Databricks
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Define the target workspace path
        WORKSPACE_BASE="/Users/lnunesvalle@gmail.com/DataFusionX"
        
        # Create the base directory
        echo "Creating base directory: $WORKSPACE_BASE"
        databricks workspace mkdirs "$WORKSPACE_BASE"
        
        # Function to process a single notebook
        process_notebook() {
          local src_file="$1"
          local rel_path="${src_file#notebooks/}"
          local target_dir="$WORKSPACE_BASE/$(dirname "$rel_path")"
          
          # Create target directory if it doesn't exist
          if [[ "$target_dir" != "$WORKSPACE_BASE" ]]; then
            echo "Creating directory: $target_dir"
            databricks workspace mkdirs "$target_dir"
          fi
          
          # Import the notebook
          echo "Deploying $src_file to $target_dir"
          databricks workspace import \
            --language PYTHON \
            --overwrite \
            "$src_file" \
            "$WORKSPACE_BASE/$rel_path"
        }
        
        # Export the function so it's available in find -exec
        export -f process_notebook
        export WORKSPACE_BASE
        
        # Process all Python files in the notebooks directory
        echo "Deploying Python notebooks..."
        find notebooks -name "*.py" -type f -exec bash -c 'process_notebook "$0"' {} \;
        
        echo "‚úÖ Notebook deployment completed"
        
        # List the deployed notebooks for verification
        echo "\nüìã Deployed notebooks in $WORKSPACE_BASE:"
        databricks workspace ls "$WORKSPACE_BASE"
    
    - name: Run Databricks Job
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Define the path to the main notebook
        MAIN_NOTEBOOK_PATH="/Users/lnunesvalle@gmail.com/DataFusionX/notebooks/bronze/ingest_coingecko.py"
        
        echo "üöÄ Starting Databricks job for notebook: $MAIN_NOTEBOOK_PATH"
        
        # Create a temporary job configuration
        JOB_CONFIG=$(cat <<EOF
        {
          "name": "Crypto Data Pipeline - $(date +'%Y%m%d-%H%M%S')",
          "existing_cluster_id": "${{ secrets.DATABRICKS_CLUSTER_ID }}",
          "libraries": [
            {
              "pypi": {
                "package": "requests"
              }
            }
          ],
          "notebook_task": {
            "notebook_path": "$MAIN_NOTEBOOK_PATH",
            "source": "WORKSPACE"
          },
          "max_retries": 1,
          "timeout_seconds": 3600
        }
        EOF
        )
        
        # Create a temporary file for the job config
        echo "$JOB_CONFIG" > job_config.json
        
        # Create the job
        echo "Creating Databricks job..."
        JOB_RESPONSE=$(databricks jobs create --json @job_config.json)
        echo "Job create response: $JOB_RESPONSE"
        
        # Extract job ID using grep and cut (more reliable than jq)
        JOB_ID=$(echo "$JOB_RESPONSE" | grep -o '"job_id":[0-9]*' | cut -d: -f2)
        
        if [ -z "$JOB_ID" ]; then
          echo "‚ùå Failed to create job. Full response:"
          echo "$JOB_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Job created with ID: $JOB_ID"
        echo "üöÄ Starting job run..."
        
        # Run the job
        RUN_RESPONSE=$(databricks jobs run-now --job-id "$JOB_ID")
        echo "Job run response: $RUN_RESPONSE"
        
        # Extract run ID using grep and cut
        RUN_ID=$(echo "$RUN_RESPONSE" | grep -o '"run_id":[0-9]*' | cut -d: -f2)
        
        if [ -z "$RUN_ID" ]; then
          echo "‚ùå Failed to start job run. Full response:"
          echo "$RUN_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Job run started with ID: $RUN_ID"
        echo "üîó View the run in Databricks: ${{ secrets.DATABRICKS_HOST }}#job/$JOB_ID/run/$RUN_ID"
