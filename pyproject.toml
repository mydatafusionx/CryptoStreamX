[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cryptostreamx"
version = "0.1.0"
description = "A real-time cryptocurrency data pipeline built with Databricks and Delta Lake"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "DataFusionX Team", email = "contact@datafusionx.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "requests>=2.26.0",
    "python-dotenv>=0.19.0",
    "pyyaml>=6.0.0",
    "databricks-cli>=0.17.0",
    "databricks-connect>=10.4.0",
    "pyspark>=3.3.0",
    "delta-spark>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.22.0",
    "black>=22.3.0",
    "flake8>=4.0.1",
    "mypy>=0.931",
    "isort>=5.10.1",
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=1.0.0",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["src"]
omit = ["**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true

[coverage:run]
branch = true

[coverage:paths]
source = ["src/*", "*/site-packages/*"]

[coverage:report]
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
